subroutine SNIPPET_NATURALIZEMUSIC()

write(*,"(A)") "% function for transposition: avoids accidentals such as ces, bis, fes, eis by using the command \naturalizeMusic"
write(*,"(A)") "#(define (naturalize-pitch p)"
write(*,"(A)") "   (let ((o (ly:pitch-octave p))"
write(*,"(A)") "         (a (* 4 (ly:pitch-alteration p)))"
write(*,"(A)") "         ;; alteration, a, in quarter tone steps,"
write(*,"(A)") "         ;; for historical reasons"
write(*,"(A)") "         (n (ly:pitch-notename p)))"
write(*,"(A)") "     (cond"
write(*,"(A)") "      ((and (> a 1) (or (eq? n 6) (eq? n 2)))"
write(*,"(A)") "       (set! a (- a 2))"
write(*,"(A)") "       (set! n (+ n 1)))"
write(*,"(A)") "      ((and (< a -1) (or (eq? n 0) (eq? n 3)))"
write(*,"(A)") "       (set! a (+ a 2))"
write(*,"(A)") "       (set! n (- n 1))))"
write(*,"(A)") "     (cond"
write(*,"(A)") "      ((> a 2) (set! a (- a 4)) (set! n (+ n 1)))"
write(*,"(A)") "      ((< a -2) (set! a (+ a 4)) (set! n (- n 1))))"
write(*,"(A)") "     (if (< n 0) (begin (set! o (- o 1)) (set! n (+ n 7))))"
write(*,"(A)") "(if (> n 6) (begin (set! o (+ o 1)) (set! n (- n 7))))"
write(*,"(A)") "     (ly:make-pitch o n (/ a 4))))"
write(*,*)
write(*,"(A)") "#(define (naturalize music)"
write(*,"(A)") "   (let ((es (ly:music-property music 'elements))"
write(*,"(A)") "         (e (ly:music-property music 'element))"
write(*,"(A)") "         (p (ly:music-property music 'pitch)))"
write(*,"(A)") "     (if (pair? es)"
write(*,"(A)") "         (ly:music-set-property!"
write(*,"(A)") "          music 'elements"
write(*,"(A)") "          (map (lambda (x) (naturalize x)) es)))"
write(*,"(A)") "     (if (ly:music? e)"
write(*,"(A)") "         (ly:music-set-property!"
write(*,"(A)") "          music 'element"
write(*,"(A)") "          (naturalize e)))"
write(*,"(A)") "     (if (ly:pitch? p)"
write(*,"(A)") "         (begin"
write(*,"(A)") "           (set! p (naturalize-pitch p))"
write(*,"(A)") "           (ly:music-set-property! music 'pitch p)))"
write(*,"(A)") "     music))"
write(*,*)
write(*,"(A)") "naturalizeMusic ="
write(*,"(A)") "#(define-music-function (parser location m)"
write(*,"(A)") "(ly:music?)"
write(*,"(A)") "   (naturalize m))"

write(11,"(A)") "% function for transposition: avoids accidentals such as ces, bis, fes, eis by using the command \naturalizeMusic"
write(11,"(A)") "#(define (naturalize-pitch p)"
write(11,"(A)") "   (let ((o (ly:pitch-octave p))"
write(11,"(A)") "         (a (* 4 (ly:pitch-alteration p)))"
write(11,"(A)") "         ;; alteration, a, in quarter tone steps,"
write(11,"(A)") "         ;; for historical reasons"
write(11,"(A)") "         (n (ly:pitch-notename p)))"
write(11,"(A)") "     (cond"
write(11,"(A)") "      ((and (> a 1) (or (eq? n 6) (eq? n 2)))"
write(11,"(A)") "       (set! a (- a 2))"
write(11,"(A)") "       (set! n (+ n 1)))"
write(11,"(A)") "      ((and (< a -1) (or (eq? n 0) (eq? n 3)))"
write(11,"(A)") "       (set! a (+ a 2))"
write(11,"(A)") "       (set! n (- n 1))))"
write(11,"(A)") "     (cond"
write(11,"(A)") "      ((> a 2) (set! a (- a 4)) (set! n (+ n 1)))"
write(11,"(A)") "      ((< a -2) (set! a (+ a 4)) (set! n (- n 1))))"
write(11,"(A)") "     (if (< n 0) (begin (set! o (- o 1)) (set! n (+ n 7))))"
write(11,"(A)") "(if (> n 6) (begin (set! o (+ o 1)) (set! n (- n 7))))"
write(11,"(A)") "     (ly:make-pitch o n (/ a 4))))"
write(11,*)
write(11,"(A)") "#(define (naturalize music)"
write(11,"(A)") "   (let ((es (ly:music-property music 'elements))"
write(11,"(A)") "         (e (ly:music-property music 'element))"
write(11,"(A)") "         (p (ly:music-property music 'pitch)))"
write(11,"(A)") "     (if (pair? es)"
write(11,"(A)") "         (ly:music-set-property!"
write(11,"(A)") "          music 'elements"
write(11,"(A)") "          (map (lambda (x) (naturalize x)) es)))"
write(11,"(A)") "     (if (ly:music? e)"
write(11,"(A)") "         (ly:music-set-property!"
write(11,"(A)") "          music 'element"
write(11,"(A)") "          (naturalize e)))"
write(11,"(A)") "     (if (ly:pitch? p)"
write(11,"(A)") "         (begin"
write(11,"(A)") "           (set! p (naturalize-pitch p))"
write(11,"(A)") "           (ly:music-set-property! music 'pitch p)))"
write(11,"(A)") "     music))"
write(11,*)
write(11,"(A)") "naturalizeMusic ="
write(11,"(A)") "#(define-music-function (parser location m)"
write(11,"(A)") "(ly:music?)"
write(11,"(A)") "   (naturalize m))"

end subroutine SNIPPET_NATURALIZEMUSIC
