subroutine SNIPPET_REPEATBRACKET()

write(*,"(A)") "% repeatBracket snippet"
write(*,"(A)") "% will add .----Nx----. above a bar, where N is the number of repetitions"
write(*,"(A)") "% based on the wonderful spanner by David Nalesnik (see: &
http://lists.gnu.org/archive/html/lilypond-user/2014-10/msg00446.html )"
write(*,"(A)") "#(define (test-stencil grob text)"
write(*,"(A)") "   (let* ((orig (ly:grob-original grob))"
write(*,"(A)") "          (siblings (ly:spanner-broken-into orig)) ; have we been split?"
write(*,"(A)") "          (refp (ly:grob-system grob))"
write(*,"(A)") "          (left-bound (ly:spanner-bound grob LEFT))"
write(*,"(A)") "          (right-bound (ly:spanner-bound grob RIGHT))"
write(*,"(A)") "          (elts-L (ly:grob-array->list (ly:grob-object left-bound 'elements)))"
write(*,"(A)") "          (elts-R (ly:grob-array->list (ly:grob-object right-bound 'elements)))"
write(*,"(A)") "          (break-alignment-L"
write(*,"(A)") "           (filter"
write(*,"(A)") "            (lambda (elt) (grob::has-interface elt 'break-alignment-interface))"
write(*,"(A)") "            elts-L))"
write(*,"(A)") "          (break-alignment-R"
write(*,"(A)") "           (filter"
write(*,"(A)") "            (lambda (elt) (grob::has-interface elt 'break-alignment-interface))"
write(*,"(A)") "            elts-R))"
write(*,"(A)") "          (break-alignment-L-ext (ly:grob-extent (car break-alignment-L) refp X))"
write(*,"(A)") "          (break-alignment-R-ext (ly:grob-extent (car break-alignment-R) refp X))"
write(*,"(A)") "          (num"
write(*,"(A)") "           (markup text))"
write(*,"(A)") "          (num"
write(*,"(A)") "           (if (or (null? siblings)"
write(*,"(A)") "                   (eq? grob (car siblings)))"
write(*,"(A)") "               num"
write(*,"(A)") "               (make-parenthesize-markup num)))"
write(*,"(A)") "          (num (grob-interpret-markup grob num))"
write(*,"(A)") "          (num-stil-ext-X (ly:stencil-extent num X))"
write(*,"(A)") "          (num-stil-ext-Y (ly:stencil-extent num Y))"
write(*,"(A)") "          (num (ly:stencil-aligned-to num X CENTER))"
write(*,"(A)") "          (num"
write(*,"(A)") "           (ly:stencil-translate-axis"
write(*,"(A)") "            num"
write(*,"(A)") "            (+ (interval-length break-alignment-L-ext)"
write(*,"(A)") "              (* 0.5"
write(*,"(A)") "                (- (car break-alignment-R-ext)"
write(*,"(A)") "                  (cdr break-alignment-L-ext))))"
write(*,"(A)") "            X))"
write(*,"(A)") "          (bracket-L"
write(*,"(A)") "           (markup"
write(*,"(A)") "            #:path"
write(*,"(A)") "            0.1 ; line-thickness"
write(*,"(A)") "            `((moveto 0.5 ,(* 0.5 (interval-length num-stil-ext-Y)))"
write(*,"(A)") "              (lineto ,(* 0.5"
write(*,"(A)") "                         (- (car break-alignment-R-ext)"
write(*,"(A)") "                           (cdr break-alignment-L-ext)"
write(*,"(A)") "                           (interval-length num-stil-ext-X)))"
write(*,"(A)") "                ,(* 0.5 (interval-length num-stil-ext-Y)))"
write(*,"(A)") "              (closepath)"
write(*,"(A)") "              (rlineto 0.0"
write(*,"(A)") "                ,(if (or (null? siblings) (eq? grob (car siblings)))"
write(*,"(A)") "                     -1.0 0.0)))))"
write(*,"(A)") "          (bracket-R"
write(*,"(A)") "           (markup"
write(*,"(A)") "            #:path"
write(*,"(A)") "            0.1"
write(*,"(A)") "            `((moveto ,(* 0.5"
write(*,"(A)") "                         (- (car break-alignment-R-ext)"
write(*,"(A)") "                           (cdr break-alignment-L-ext)"
write(*,"(A)") "                           (interval-length num-stil-ext-X)))"
write(*,"(A)") "                ,(* 0.5 (interval-length num-stil-ext-Y)))"
write(*,"(A)") "              (lineto 0.5"
write(*,"(A)") "                ,(* 0.5 (interval-length num-stil-ext-Y)))"
write(*,"(A)") "              (closepath)"
write(*,"(A)") "              (rlineto 0.0"
write(*,"(A)") "                ,(if (or (null? siblings) (eq? grob (last siblings)))"
write(*,"(A)") "                     -1.0 0.0)))))"
write(*,"(A)") "          (bracket-L (grob-interpret-markup grob bracket-L))"
write(*,"(A)") "          (bracket-R (grob-interpret-markup grob bracket-R))"
write(*,"(A)") "          (num (ly:stencil-combine-at-edge num X LEFT bracket-L 0.4))"
write(*,"(A)") "          (num (ly:stencil-combine-at-edge num X RIGHT bracket-R 0.4)))"
write(*,"(A)") "     num))"
write(*,*) 
write(*,"(A)") "#(define-public (Measure_attached_spanner_engraver context)"
write(*,"(A)") "   (let ((span '())"
write(*,"(A)") "         (finished '())"
write(*,"(A)") "         (event-start '())"
write(*,"(A)") "         (event-stop '()))"
write(*,"(A)") "     (make-engraver"
write(*,"(A)") "      (listeners ((measure-counter-event engraver event)"
write(*,"(A)") "                  (if (= START (ly:event-property event 'span-direction))"
write(*,"(A)") "                      (set! event-start event)"
write(*,"(A)") "                      (set! event-stop event))))"
write(*,"(A)") "      ((process-music trans)"
write(*,"(A)") "       (if (ly:stream-event? event-stop)"
write(*,"(A)") "           (if (null? span)"
write(*,"(A)") '               (ly:warning "Youre trying to end a measure-attached spanner but you havent started one.")'
write(*,"(A)") "               (begin (set! finished span)"
write(*,"(A)") "                 (ly:engraver-announce-end-grob trans finished event-start)"
write(*,"(A)") "                 (set! span '())"
write(*,"(A)") "                 (set! event-stop '()))))"
write(*,"(A)") "       (if (ly:stream-event? event-start)"
write(*,"(A)") "           (begin (set! span (ly:engraver-make-grob trans 'MeasureCounter event-start))"
write(*,"(A)") "             (set! event-start '()))))"
write(*,"(A)") "      ((stop-translation-timestep trans)"
write(*,"(A)") "       (if (and (ly:spanner? span)"
write(*,"(A)") "                (null? (ly:spanner-bound span LEFT))"
write(*,"(A)") "                (moment<=? (ly:context-property context 'measurePosition) ZERO-MOMENT))"
write(*,"(A)") "           (ly:spanner-set-bound! span LEFT" 
write(*,"(A)") "             (ly:context-property context 'currentCommandColumn)))"
write(*,"(A)") "       (if (and (ly:spanner? finished)"
write(*,"(A)") "                (moment<=? (ly:context-property context 'measurePosition) ZERO-MOMENT))"
write(*,"(A)") "           (begin"
write(*,"(A)") "            (if (null? (ly:spanner-bound finished RIGHT))"
write(*,"(A)") "                (ly:spanner-set-bound! finished RIGHT"
write(*,"(A)") "                  (ly:context-property context 'currentCommandColumn)))"
write(*,"(A)") "            (set! finished '())"
write(*,"(A)") "            (set! event-start '())"
write(*,"(A)") "            (set! event-stop '()))))"
write(*,"(A)") "      ((finalize trans)"
write(*,"(A)") "       (if (ly:spanner? finished)"
write(*,"(A)") "           (begin"
write(*,"(A)") "            (if (null? (ly:spanner-bound finished RIGHT))"
write(*,"(A)") "                (set! (ly:spanner-bound finished RIGHT)"
write(*,"(A)") "                      (ly:context-property context 'currentCommandColumn)))"
write(*,"(A)") "            (set! finished '())))"
write(*,"(A)") "       (if (ly:spanner? span)"
write(*,"(A)") "           (begin"
write(*,"(A)") '            (ly:warning "I think theres a dangling measure-attached spanner :-(")'
write(*,"(A)") "            (ly:grob-suicide! span)"
write(*,"(A)") "            (set! span '())))))))"
write(*,*) 
write(*,"(A)") "% necessary layout options"
write(*,"(A)") "% note that you can have more than one single layout block &
(some of them may even be outside and some inside \score)"
write(*,"(A)") "\layout {"
write(*,"(A)") "  \context {"
write(*,"(A)") "    \Staff"
write(*,"(A)") "    \consists #Measure_attached_spanner_engraver"
write(*,"(A)") "    \override MeasureCounter.font-encoding = #'latin1"
write(*,"(A)") "    \override MeasureCounter.font-size = 0"
write(*,"(A)") "    \override MeasureCounter.outside-staff-padding = 2"
write(*,"(A)") "    \override MeasureCounter.outside-staff-horizontal-padding = #0"
write(*,"(A)") "  }"
write(*,"(A)") "}"
write(*,*) 
write(*,"(A)") "% function itself"
write(*,"(A)") "repeatBracket = #(define-music-function"
write(*,"(A)") "     (parser location N note)"
write(*,"(A)") "     (number? ly:music?)"
write(*,"(A)") "      #{"        
write(*,"(A)") "        \override Staff.MeasureCounter.stencil =" 
write(*,"(A)") '        #(lambda (grob) (test-stencil grob #{ #(string-append(number->string N) "Ã—") #} ))'
write(*,"(A)") "        \startMeasureCount"
write(*,"(A)") "        \repeat volta #N { $note }"
write(*,"(A)") "        \stopMeasureCount"
write(*,"(A)") "      #}"
write(*,"(A)") "     )"

write(11,"(A)") "% repeatBracket snippet"
write(11,"(A)") "% will add .----Nx----. above a bar, where N is the number of repetitions"
write(11,"(A)") "% based on the wonderful spanner by David Nalesnik (see: &
http://lists.gnu.org/archive/html/lilypond-user/2014-10/msg00446.html )"
write(11,"(A)") "#(define (test-stencil grob text)"
write(11,"(A)") "   (let* ((orig (ly:grob-original grob))"
write(11,"(A)") "          (siblings (ly:spanner-broken-into orig)) ; have we been split?"
write(11,"(A)") "          (refp (ly:grob-system grob))"
write(11,"(A)") "          (left-bound (ly:spanner-bound grob LEFT))"
write(11,"(A)") "          (right-bound (ly:spanner-bound grob RIGHT))"
write(11,"(A)") "          (elts-L (ly:grob-array->list (ly:grob-object left-bound 'elements)))"
write(11,"(A)") "          (elts-R (ly:grob-array->list (ly:grob-object right-bound 'elements)))"
write(11,"(A)") "          (break-alignment-L"
write(11,"(A)") "           (filter"
write(11,"(A)") "            (lambda (elt) (grob::has-interface elt 'break-alignment-interface))"
write(11,"(A)") "            elts-L))"
write(11,"(A)") "          (break-alignment-R"
write(11,"(A)") "           (filter"
write(11,"(A)") "            (lambda (elt) (grob::has-interface elt 'break-alignment-interface))"
write(11,"(A)") "            elts-R))"
write(11,"(A)") "          (break-alignment-L-ext (ly:grob-extent (car break-alignment-L) refp X))"
write(11,"(A)") "          (break-alignment-R-ext (ly:grob-extent (car break-alignment-R) refp X))"
write(11,"(A)") "          (num"
write(11,"(A)") "           (markup text))"
write(11,"(A)") "          (num"
write(11,"(A)") "           (if (or (null? siblings)"
write(11,"(A)") "                   (eq? grob (car siblings)))"
write(11,"(A)") "               num"
write(11,"(A)") "               (make-parenthesize-markup num)))"
write(11,"(A)") "          (num (grob-interpret-markup grob num))"
write(11,"(A)") "          (num-stil-ext-X (ly:stencil-extent num X))"
write(11,"(A)") "          (num-stil-ext-Y (ly:stencil-extent num Y))"
write(11,"(A)") "          (num (ly:stencil-aligned-to num X CENTER))"
write(11,"(A)") "          (num"
write(11,"(A)") "           (ly:stencil-translate-axis"
write(11,"(A)") "            num"
write(11,"(A)") "            (+ (interval-length break-alignment-L-ext)"
write(11,"(A)") "              (* 0.5"
write(11,"(A)") "                (- (car break-alignment-R-ext)"
write(11,"(A)") "                  (cdr break-alignment-L-ext))))"
write(11,"(A)") "            X))"
write(11,"(A)") "          (bracket-L"
write(11,"(A)") "           (markup"
write(11,"(A)") "            #:path"
write(11,"(A)") "            0.1 ; line-thickness"
write(11,"(A)") "            `((moveto 0.5 ,(* 0.5 (interval-length num-stil-ext-Y)))"
write(11,"(A)") "              (lineto ,(* 0.5"
write(11,"(A)") "                         (- (car break-alignment-R-ext)"
write(11,"(A)") "                           (cdr break-alignment-L-ext)"
write(11,"(A)") "                           (interval-length num-stil-ext-X)))"
write(11,"(A)") "                ,(* 0.5 (interval-length num-stil-ext-Y)))"
write(11,"(A)") "              (closepath)"
write(11,"(A)") "              (rlineto 0.0"
write(11,"(A)") "                ,(if (or (null? siblings) (eq? grob (car siblings)))"
write(11,"(A)") "                     -1.0 0.0)))))"
write(11,"(A)") "          (bracket-R"
write(11,"(A)") "           (markup"
write(11,"(A)") "            #:path"
write(11,"(A)") "            0.1"
write(11,"(A)") "            `((moveto ,(* 0.5"
write(11,"(A)") "                         (- (car break-alignment-R-ext)"
write(11,"(A)") "                           (cdr break-alignment-L-ext)"
write(11,"(A)") "                           (interval-length num-stil-ext-X)))"
write(11,"(A)") "                ,(* 0.5 (interval-length num-stil-ext-Y)))"
write(11,"(A)") "              (lineto 0.5"
write(11,"(A)") "                ,(* 0.5 (interval-length num-stil-ext-Y)))"
write(11,"(A)") "              (closepath)"
write(11,"(A)") "              (rlineto 0.0"
write(11,"(A)") "                ,(if (or (null? siblings) (eq? grob (last siblings)))"
write(11,"(A)") "                     -1.0 0.0)))))"
write(11,"(A)") "          (bracket-L (grob-interpret-markup grob bracket-L))"
write(11,"(A)") "          (bracket-R (grob-interpret-markup grob bracket-R))"
write(11,"(A)") "          (num (ly:stencil-combine-at-edge num X LEFT bracket-L 0.4))"
write(11,"(A)") "          (num (ly:stencil-combine-at-edge num X RIGHT bracket-R 0.4)))"
write(11,"(A)") "     num))"
write(11,*) 
write(11,"(A)") "#(define-public (Measure_attached_spanner_engraver context)"
write(11,"(A)") "   (let ((span '())"
write(11,"(A)") "         (finished '())"
write(11,"(A)") "         (event-start '())"
write(11,"(A)") "         (event-stop '()))"
write(11,"(A)") "     (make-engraver"
write(11,"(A)") "      (listeners ((measure-counter-event engraver event)"
write(11,"(A)") "                  (if (= START (ly:event-property event 'span-direction))"
write(11,"(A)") "                      (set! event-start event)"
write(11,"(A)") "                      (set! event-stop event))))"
write(11,"(A)") "      ((process-music trans)"
write(11,"(A)") "       (if (ly:stream-event? event-stop)"
write(11,"(A)") "           (if (null? span)"
write(11,"(A)") '               (ly:warning "Youre trying to end a measure-attached spanner but you havent started one.")'
write(11,"(A)") "               (begin (set! finished span)"
write(11,"(A)") "                 (ly:engraver-announce-end-grob trans finished event-start)"
write(11,"(A)") "                 (set! span '())"
write(11,"(A)") "                 (set! event-stop '()))))"
write(11,"(A)") "       (if (ly:stream-event? event-start)"
write(11,"(A)") "           (begin (set! span (ly:engraver-make-grob trans 'MeasureCounter event-start))"
write(11,"(A)") "             (set! event-start '()))))"
write(11,"(A)") "      ((stop-translation-timestep trans)"
write(11,"(A)") "       (if (and (ly:spanner? span)"
write(11,"(A)") "                (null? (ly:spanner-bound span LEFT))"
write(11,"(A)") "                (moment<=? (ly:context-property context 'measurePosition) ZERO-MOMENT))"
write(11,"(A)") "           (ly:spanner-set-bound! span LEFT" 
write(11,"(A)") "             (ly:context-property context 'currentCommandColumn)))"
write(11,"(A)") "       (if (and (ly:spanner? finished)"
write(11,"(A)") "                (moment<=? (ly:context-property context 'measurePosition) ZERO-MOMENT))"
write(11,"(A)") "           (begin"
write(11,"(A)") "            (if (null? (ly:spanner-bound finished RIGHT))"
write(11,"(A)") "                (ly:spanner-set-bound! finished RIGHT"
write(11,"(A)") "                  (ly:context-property context 'currentCommandColumn)))"
write(11,"(A)") "            (set! finished '())"
write(11,"(A)") "            (set! event-start '())"
write(11,"(A)") "            (set! event-stop '()))))"
write(11,"(A)") "      ((finalize trans)"
write(11,"(A)") "       (if (ly:spanner? finished)"
write(11,"(A)") "           (begin"
write(11,"(A)") "            (if (null? (ly:spanner-bound finished RIGHT))"
write(11,"(A)") "                (set! (ly:spanner-bound finished RIGHT)"
write(11,"(A)") "                      (ly:context-property context 'currentCommandColumn)))"
write(11,"(A)") "            (set! finished '())))"
write(11,"(A)") "       (if (ly:spanner? span)"
write(11,"(A)") "           (begin"
write(11,"(A)") '            (ly:warning "I think theres a dangling measure-attached spanner :-(")'
write(11,"(A)") "            (ly:grob-suicide! span)"
write(11,"(A)") "            (set! span '())))))))"
write(11,*) 
write(11,"(A)") "% necessary layout options"
write(11,"(A)") "% note that you can have more than one single layout block &
(some of them may even be outside and some inside \score)"
write(11,"(A)") "\layout {"
write(11,"(A)") "  \context {"
write(11,"(A)") "    \Staff"
write(11,"(A)") "    \consists #Measure_attached_spanner_engraver"
write(11,"(A)") "    \override MeasureCounter.font-encoding = #'latin1"
write(11,"(A)") "    \override MeasureCounter.font-size = 0"
write(11,"(A)") "    \override MeasureCounter.outside-staff-padding = 2"
write(11,"(A)") "    \override MeasureCounter.outside-staff-horizontal-padding = #0"
write(11,"(A)") "  }"
write(11,"(A)") "}"
write(11,*) 
write(11,"(A)") "% function itself"
write(11,"(A)") "repeatBracket = #(define-music-function"
write(11,"(A)") "     (parser location N note)"
write(11,"(A)") "     (number? ly:music?)"
write(11,"(A)") "      #{"        
write(11,"(A)") "        \override Staff.MeasureCounter.stencil =" 
write(11,"(A)") '        #(lambda (grob) (test-stencil grob #{ #(string-append(number->string N) "Ã—") #} ))'
write(11,"(A)") "        \startMeasureCount"
write(11,"(A)") "        \repeat volta #N { $note }"
write(11,"(A)") "        \stopMeasureCount"
write(11,"(A)") "      #}"
write(11,"(A)") "     )"
	
end subroutine SNIPPET_REPEATBRACKET
