subroutine SNIPPET_CROSS_STAFF_ARPEGGIOS()

write(*,"(A)") "#(define (arpeggio-generic pushpops)"
write(*,"(A)") "  (lambda (context)"
write(*,"(A)") "    (let* ((parent"
write(*,"(A)") "             (ly:context-property-where-defined context"
write(*,"(A)") "                                                'connectArpeggios))"
write(*,"(A)") "           (target"
write(*,"(A)") "             (if (and (not (null? parent))"
write(*,"(A)") "                      (eq? #t (ly:context-property parent"
write(*,"(A)") "                                                   'connectArpeggios)))"
write(*,"(A)") "                 parent"
write(*,"(A)") "                 context)))"
write(*,"(A)") "      (for-each"
write(*,"(A)") "        (lambda (pushpop)"
write(*,"(A)") "          (if (pair? pushpop)"
write(*,"(A)") "              (ly:context-pushpop-property target"
write(*,"(A)") "                                           'Arpeggio"
write(*,"(A)") "                                           (car pushpop)"
write(*,"(A)") "                                           (cdr pushpop))"
write(*,"(A)") "              (ly:context-pushpop-property target"
write(*,"(A)") "                                           'Arpeggio"
write(*,"(A)") "                                           pushpop)))"
write(*,"(A)") "        pushpops))))"
write(*,"(A)") ""
write(*,"(A)") "#(define (find-spannable-context context)"
write(*,"(A)") "  (let ((spannable-contexts '(GrandStaff PianoStaff StaffGroup)))"
write(*,"(A)") "    (if (member (ly:context-name context) spannable-contexts)"
write(*,"(A)") "        context"
write(*,"(A)") "        (let ((parent (ly:context-parent context)))"
write(*,"(A)") "          (if parent"
write(*,"(A)") "              (find-spannable-context parent)"
write(*,"(A)") "              #f)))))"
write(*,"(A)") ""
write(*,"(A)") "#(define (move-arpeggio-generic origin destination)"
write(*,"(A)") "  ;; origin and destination are contexts"
write(*,"(A)") "  (let* ((Arpeggio (ly:context-grob-definition origin 'Arpeggio))"
write(*,"(A)") "         (X-extent           (assoc 'X-extent           Arpeggio))"
write(*,"(A)") "         (stencil            (assoc 'stencil            Arpeggio))"
write(*,"(A)") "         (arpeggio-direction (assoc 'arpeggio-direction Arpeggio))"
write(*,"(A)") "         (direction          (assoc 'direction          Arpeggio))"
write(*,"(A)") "         (dash-definition    (assoc 'dash-definition    Arpeggio))"
write(*,"(A)") "         (props `((X-extent           . ,X-extent)"
write(*,"(A)") "                  (stencil            . ,stencil)"
write(*,"(A)") "                  (arpeggio-direction . ,arpeggio-direction)"
write(*,"(A)") "                  (direction          . ,direction)"
write(*,"(A)") "                  (dash-definition    . ,dash-definition))))"
write(*,"(A)") "    (for-each"
write(*,"(A)") "      (lambda (prop)"
write(*,"(A)") "        ;; copy <origin>.Arpeggio props to <destination>.Arpeggio"
write(*,"(A)") "        (if (cdr prop)"
write(*,"(A)") "            (ly:context-pushpop-property destination"
write(*,"(A)") "                                         'Arpeggio"
write(*,"(A)") "                                         (cadr prop)"
write(*,"(A)") "                                         (cddr prop))"
write(*,"(A)") "            (ly:context-pushpop-property destination"
write(*,"(A)") "                                         'Arpeggio"
write(*,"(A)") "                                         (car prop)))"
write(*,"(A)") "        ;; revert <origin>.Arpeggio props"
write(*,"(A)") "        (ly:context-pushpop-property origin 'Arpeggio (car prop)))"
write(*,"(A)") "      props)))"
write(*,"(A)") ""
write(*,"(A)") "#(define (move-arpeggio-to-spannable-context context)"
write(*,"(A)") "  ;; move the active arpeggio properties to the closest GrandStaff,"
write(*,"(A)") "  ;; PianoStaff, or StaffGroup parent that can be found."
write(*,"(A)") "  (let ((target (find-spannable-context context)))"
write(*,"(A)") "    (if target (move-arpeggio-generic context target))))"
write(*,"(A)") ""
write(*,"(A)") "#(define (move-arpeggio-to-this-context context)"
write(*,"(A)") "  ;; move any arpeggio props, active in a parent context where"
write(*,"(A)") "  ;; 'connectArpeggios is #t, to this context (usually Voice)."
write(*,"(A)") "  (let ((origin (ly:context-property-where-defined context"
write(*,"(A)") "                                                   'connectArpeggios)))"
write(*,"(A)") "    (if (and (not (null? origin))"
write(*,"(A)") "             (eq? #t (ly:context-property origin 'connectArpeggios)))"
write(*,"(A)") "        (move-arpeggio-generic origin context))))"
write(*,"(A)") ""
write(*,"(A)") "#(define (connect-arpeggios-switch value)"
write(*,"(A)") "  (lambda (context)"
write(*,"(A)") "    (let ((target (find-spannable-context context)))"
write(*,"(A)") "      (if target"
write(*,"(A)") "          (ly:context-set-property! target 'connectArpeggios value)"
write(*,"(A)") '          (ly:warning "No viable context found for connectArpeggios")))))'
write(*,"(A)") ""
write(*,"(A)") "connectArpeggiosOn = {"
write(*,"(A)") "  \applyContext #move-arpeggio-to-spannable-context"
write(*,"(A)") "  \applyContext #(connect-arpeggios-switch #t)"
write(*,"(A)") "}"
write(*,"(A)") ""
write(*,"(A)") "connectArpeggiosOff = {"
write(*,"(A)") "  \applyContext #move-arpeggio-to-this-context"
write(*,"(A)") "  \applyContext #(connect-arpeggios-switch #f)"
write(*,"(A)") "}"
write(*,"(A)") ""
write(*,"(A)") "arpeggioArrowUp ="
write(*,"(A)") "  \applyContext"
write(*,"(A)") "    #(arpeggio-generic `(stencil"
write(*,"(A)") "                         X-extent"
write(*,"(A)") "                         (arpeggio-direction . ,UP)))"
write(*,"(A)") ""
write(*,"(A)") "arpeggioArrowDown ="
write(*,"(A)") "  \applyContext"
write(*,"(A)") "    #(arpeggio-generic `(stencil"
write(*,"(A)") "                         X-extent"
write(*,"(A)") "                         (arpeggio-direction . ,DOWN)))"
write(*,"(A)") ""
write(*,"(A)") "arpeggioNormal ="
write(*,"(A)") "  \applyContext"
write(*,"(A)") "    #(arpeggio-generic '(stencil"
write(*,"(A)") "                         X-extent"
write(*,"(A)") "                         arpeggio-direction"
write(*,"(A)") "                         dash-definition))"
write(*,"(A)") ""
write(*,"(A)") "arpeggioBracket ="
write(*,"(A)") "  \applyContext"
write(*,"(A)") "    #(arpeggio-generic `(X-extent"
write(*,"(A)") "                         (stencil . ,ly:arpeggio::brew-chord-bracket)))"

write(11,"(A)") "#(define (arpeggio-generic pushpops)"
write(11,"(A)") "  (lambda (context)"
write(11,"(A)") "    (let* ((parent"
write(11,"(A)") "             (ly:context-property-where-defined context"
write(11,"(A)") "                                                'connectArpeggios))"
write(11,"(A)") "           (target"
write(11,"(A)") "             (if (and (not (null? parent))"
write(11,"(A)") "                      (eq? #t (ly:context-property parent"
write(11,"(A)") "                                                   'connectArpeggios)))"
write(11,"(A)") "                 parent"
write(11,"(A)") "                 context)))"
write(11,"(A)") "      (for-each"
write(11,"(A)") "        (lambda (pushpop)"
write(11,"(A)") "          (if (pair? pushpop)"
write(11,"(A)") "              (ly:context-pushpop-property target"
write(11,"(A)") "                                           'Arpeggio"
write(11,"(A)") "                                           (car pushpop)"
write(11,"(A)") "                                           (cdr pushpop))"
write(11,"(A)") "              (ly:context-pushpop-property target"
write(11,"(A)") "                                           'Arpeggio"
write(11,"(A)") "                                           pushpop)))"
write(11,"(A)") "        pushpops))))"
write(11,"(A)") ""
write(11,"(A)") "#(define (find-spannable-context context)"
write(11,"(A)") "  (let ((spannable-contexts '(GrandStaff PianoStaff StaffGroup)))"
write(11,"(A)") "    (if (member (ly:context-name context) spannable-contexts)"
write(11,"(A)") "        context"
write(11,"(A)") "        (let ((parent (ly:context-parent context)))"
write(11,"(A)") "          (if parent"
write(11,"(A)") "              (find-spannable-context parent)"
write(11,"(A)") "              #f)))))"
write(11,"(A)") ""
write(11,"(A)") "#(define (move-arpeggio-generic origin destination)"
write(11,"(A)") "  ;; origin and destination are contexts"
write(11,"(A)") "  (let* ((Arpeggio (ly:context-grob-definition origin 'Arpeggio))"
write(11,"(A)") "         (X-extent           (assoc 'X-extent           Arpeggio))"
write(11,"(A)") "         (stencil            (assoc 'stencil            Arpeggio))"
write(11,"(A)") "         (arpeggio-direction (assoc 'arpeggio-direction Arpeggio))"
write(11,"(A)") "         (direction          (assoc 'direction          Arpeggio))"
write(11,"(A)") "         (dash-definition    (assoc 'dash-definition    Arpeggio))"
write(11,"(A)") "         (props `((X-extent           . ,X-extent)"
write(11,"(A)") "                  (stencil            . ,stencil)"
write(11,"(A)") "                  (arpeggio-direction . ,arpeggio-direction)"
write(11,"(A)") "                  (direction          . ,direction)"
write(11,"(A)") "                  (dash-definition    . ,dash-definition))))"
write(11,"(A)") "    (for-each"
write(11,"(A)") "      (lambda (prop)"
write(11,"(A)") "        ;; copy <origin>.Arpeggio props to <destination>.Arpeggio"
write(11,"(A)") "        (if (cdr prop)"
write(11,"(A)") "            (ly:context-pushpop-property destination"
write(11,"(A)") "                                         'Arpeggio"
write(11,"(A)") "                                         (cadr prop)"
write(11,"(A)") "                                         (cddr prop))"
write(11,"(A)") "            (ly:context-pushpop-property destination"
write(11,"(A)") "                                         'Arpeggio"
write(11,"(A)") "                                         (car prop)))"
write(11,"(A)") "        ;; revert <origin>.Arpeggio props"
write(11,"(A)") "        (ly:context-pushpop-property origin 'Arpeggio (car prop)))"
write(11,"(A)") "      props)))"
write(11,"(A)") ""
write(11,"(A)") "#(define (move-arpeggio-to-spannable-context context)"
write(11,"(A)") "  ;; move the active arpeggio properties to the closest GrandStaff,"
write(11,"(A)") "  ;; PianoStaff, or StaffGroup parent that can be found."
write(11,"(A)") "  (let ((target (find-spannable-context context)))"
write(11,"(A)") "    (if target (move-arpeggio-generic context target))))"
write(11,"(A)") ""
write(11,"(A)") "#(define (move-arpeggio-to-this-context context)"
write(11,"(A)") "  ;; move any arpeggio props, active in a parent context where"
write(11,"(A)") "  ;; 'connectArpeggios is #t, to this context (usually Voice)."
write(11,"(A)") "  (let ((origin (ly:context-property-where-defined context"
write(11,"(A)") "                                                   'connectArpeggios)))"
write(11,"(A)") "    (if (and (not (null? origin))"
write(11,"(A)") "             (eq? #t (ly:context-property origin 'connectArpeggios)))"
write(11,"(A)") "        (move-arpeggio-generic origin context))))"
write(11,"(A)") ""
write(11,"(A)") "#(define (connect-arpeggios-switch value)"
write(11,"(A)") "  (lambda (context)"
write(11,"(A)") "    (let ((target (find-spannable-context context)))"
write(11,"(A)") "      (if target"
write(11,"(A)") "          (ly:context-set-property! target 'connectArpeggios value)"
write(11,"(A)") '          (ly:warning "No viable context found for connectArpeggios")))))'
write(11,"(A)") ""
write(11,"(A)") "connectArpeggiosOn = {"
write(11,"(A)") "  \applyContext #move-arpeggio-to-spannable-context"
write(11,"(A)") "  \applyContext #(connect-arpeggios-switch #t)"
write(11,"(A)") "}"
write(11,"(A)") ""
write(11,"(A)") "connectArpeggiosOff = {"
write(11,"(A)") "  \applyContext #move-arpeggio-to-this-context"
write(11,"(A)") "  \applyContext #(connect-arpeggios-switch #f)"
write(11,"(A)") "}"
write(11,"(A)") ""
write(11,"(A)") "arpeggioArrowUp ="
write(11,"(A)") "  \applyContext"
write(11,"(A)") "    #(arpeggio-generic `(stencil"
write(11,"(A)") "                         X-extent"
write(11,"(A)") "                         (arpeggio-direction . ,UP)))"
write(11,"(A)") ""
write(11,"(A)") "arpeggioArrowDown ="
write(11,"(A)") "  \applyContext"
write(11,"(A)") "    #(arpeggio-generic `(stencil"
write(11,"(A)") "                         X-extent"
write(11,"(A)") "                         (arpeggio-direction . ,DOWN)))"
write(11,"(A)") ""
write(11,"(A)") "arpeggioNormal ="
write(11,"(A)") "  \applyContext"
write(11,"(A)") "    #(arpeggio-generic '(stencil"
write(11,"(A)") "                         X-extent"
write(11,"(A)") "                         arpeggio-direction"
write(11,"(A)") "                         dash-definition))"
write(11,"(A)") ""
write(11,"(A)") "arpeggioBracket ="
write(11,"(A)") "  \applyContext"
write(11,"(A)") "    #(arpeggio-generic `(X-extent"
write(11,"(A)") "                         (stencil . ,ly:arpeggio::brew-chord-bracket)))"

end subroutine SNIPPET_CROSS_STAFF_ARPEGGIOS
