subroutine SNIPPET_MINOR_TRILLS()

write(*,"(A)") "#(define (ac:trill music)"
write(*,"(A)") "  (let* ((hemisemidur (ly:make-duration 5 0 1/1))"
write(*,"(A)") "         (orig-len  (ly:music-length music))"
write(*,"(A)") "         (t (ac:twiddletime music))"
write(*,"(A)") "         (uppernote '())"
write(*,"(A)") "         (note_moment (ly:moment-mul t (ly:make-moment 1/2)))"
write(*,"(A)") "         (c1 (ly:moment-div orig-len t))"
write(*,"(A)") "         (c2 (inexact->exact"
write(*,"(A)") "              (round (/ (ly:moment-main-numerator c1)"
write(*,"(A)") "                      (* 2 (ly:moment-main-denominator c1))))))"
write(*,"(A)") "         (count (if (< c2 2) 2 c2)))"
write(*,*) ""
write(*,"(A)") "   (set! (ly:music-property music 'elements)"
write(*,"(A)") "    (filter (lambda (y) (eq? 'NoteEvent (ly:music-property y 'name)))"
write(*,"(A)") "     (ly:music-property music 'elements)))"
write(*,"(A)") "   (map (lambda (y) (ac:setduration y hemisemidur))"
write(*,"(A)") "    (ly:music-property music 'elements))"
write(*,"(A)") "   (set! uppernote (ly:music-transpose (ly:music-deep-copy music) (ly:make-pitch 0 0 SHARP)))"
write(*,*) ""
write(*,"(A)") "   (let* ((trillMusicElements"
write(*,"(A)") "          (let loop ((so_far (list uppernote music))"
write(*,"(A)") "                     (c count))"
write(*,"(A)") "           (if (> c 1)"
write(*,"(A)") "            (loop (append (list (ly:music-deep-copy uppernote) (ly:music-deep-copy music)) so_far) (1- c))"
write(*,"(A)") "            so_far)))"
write(*,"(A)") "          (trillMusic (make-sequential-music trillMusicElements))"
write(*,"(A)") "          (newlen (ly:music-length trillMusic))"
write(*,"(A)") "          (factor (ly:moment-div  orig-len newlen)))"
write(*,"(A)") "    (ly:music-compress trillMusic factor)"
write(*,"(A)") ")))"

write(11,"(A)") "#(define (ac:trill music)"
write(11,"(A)") "  (let* ((hemisemidur (ly:make-duration 5 0 1/1))"
write(11,"(A)") "         (orig-len  (ly:music-length music))"
write(11,"(A)") "         (t (ac:twiddletime music))"
write(11,"(A)") "         (uppernote '())"
write(11,"(A)") "         (note_moment (ly:moment-mul t (ly:make-moment 1/2)))"
write(11,"(A)") "         (c1 (ly:moment-div orig-len t))"
write(11,"(A)") "         (c2 (inexact->exact"
write(11,"(A)") "              (round (/ (ly:moment-main-numerator c1)"
write(11,"(A)") "                      (* 2 (ly:moment-main-denominator c1))))))"
write(11,"(A)") "         (count (if (< c2 2) 2 c2)))"
write(11,*) ""
write(11,"(A)") "   (set! (ly:music-property music 'elements)"
write(11,"(A)") "    (filter (lambda (y) (eq? 'NoteEvent (ly:music-property y 'name)))"
write(11,"(A)") "     (ly:music-property music 'elements)))"
write(11,"(A)") "   (map (lambda (y) (ac:setduration y hemisemidur))"
write(11,"(A)") "    (ly:music-property music 'elements))"
write(11,"(A)") "   (set! uppernote (ly:music-transpose (ly:music-deep-copy music) (ly:make-pitch 0 0 SHARP)))"
write(11,*) ""
write(11,"(A)") "   (let* ((trillMusicElements"
write(11,"(A)") "          (let loop ((so_far (list uppernote music))"
write(11,"(A)") "                     (c count))"
write(11,"(A)") "           (if (> c 1)"
write(11,"(A)") "            (loop (append (list (ly:music-deep-copy uppernote) (ly:music-deep-copy music)) so_far) (1- c))"
write(11,"(A)") "            so_far)))"
write(11,"(A)") "          (trillMusic (make-sequential-music trillMusicElements))"
write(11,"(A)") "          (newlen (ly:music-length trillMusic))"
write(11,"(A)") "          (factor (ly:moment-div  orig-len newlen)))"
write(11,"(A)") "    (ly:music-compress trillMusic factor)"
write(11,"(A)") ")))"

end subroutine SNIPPET_MINOR_TRILLS
